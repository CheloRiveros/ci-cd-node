#Deploy script for Foku-api

language: node_js

env:
  - AWS_USER_ID="197979423491" AWS_ECR_API="197979423491.dkr.ecr.us-east-2.amazonaws.com/chat"
services:
   - docker
   - postgresql
branches:
    only:
      - master

install:
  - echo "install nothing!"

before_script:
  - psql -c 'create database chat_app_test;' -U postgres

script:
  - echo "running tests"
  - sed -i -e 's/\r$/\n/' scripts/start.sh
  - sed -i -e 's/\r$/\n/' scripts/stop.sh
  - sed -i -e 's/\r$/\n/' scripts/install.sh #correct files endings
  - cd backend
  - nvm install 12.0
  - npm install --silent
  - npm test
  - cd ..
  - zip -r -q latest * && echo "success" || echo "failure"
  - mkdir -p dpl_cd_upload
  - mv latest.zip dpl_cd_upload/latest.zip 

after_success:
  - docker --version  # document the version travis is using
  - pip install --user awscli # install aws cli w/o sudo
  - export PATH=$PATH:$HOME/.local/bin # put aws in the path
  - eval $(aws ecr get-login --region us-east-2 --no-include-email) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  - docker build -t $AWS_ECR_API:latest backend
  - docker tag $AWS_ECR_API:latest
  - docker push $AWS_ECR_API:latest
  - docker images

deploy:
- provider: s3 #To upload the code to s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  local_dir: dpl_cd_upload #from where
  skip_cleanup: true #use cache (doesn't work...)
  bucket: "chat-deploy-travis" #target bucket to use
  region: us-east-2
  upload-dir: latest
- provider: codedeploy #Uploading to target group
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  bucket: "chat-deploy-travis" #target bucket to use, definaed before
  key: latest/latest.zip #Source code, you can use any name but must be consistent
  bundle_type: zip
  application: Chat
  deployment_group: Chat-api
  region: us-east-2
  wait_until_deployed: true #wise thing to do
  on:
    branch: master


